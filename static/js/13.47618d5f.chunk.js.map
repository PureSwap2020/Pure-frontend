{"version":3,"sources":["utils/erc20.ts","components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/ModalInput/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/Farms.tsx"],"names":["getContract","provider","address","Web3","eth","Contract","erc20","getAllowance","lpContract","masterChefContract","account","a","methods","allowance","options","call","getTokenBalance","tokenAddress","userAddress","contract","balanceOf","balance","Wrapper","styled","div","theme","colors","textDisabled","ExpandableSectionButton","onClick","expanded","aria-label","role","color","defaultProps","getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","StyledLinkExternal","LinkExternal","text","primary","DetailsSection","bscScanAddress","removed","totalValueFormated","lpLabel","addLiquidityUrl","TranslateString","useI18n","justifyContent","fontSize","href","style","marginTop","external","bold","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","farmImage","tokenSymbol","alignItems","mb","src","alt","width","height","flexDirection","fontWeight","variant","StyledTokenInput","input","isWarning","shadows","warning","inset","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","symbol","onChange","onSelectMax","value","inputTitle","isBalanceZero","displayBalance","parseFloat","toFixed","position","pl","toLocaleString","placeholder","size","mr","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","useCallback","e","currentTarget","handleSelectMax","title","ModalActions","fullWidth","disabled","alignSelf","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","pid","onStake","useStake","onUnstake","useUnstake","rawStakedBalance","getBalanceNumber","useModal","onPresentDeposit","onPresentWithdraw","mt","HarvestAction","earnings","onReward","useHarvest","rawEarningsBalance","Action","CardActions","farm","ethereum","requestedApproval","setRequestedApproval","useFarmFromSymbol","lpSymbol","lpAddresses","useFarmUser","lpAddress","getAddress","lpName","toUpperCase","isApproved","isGreaterThan","onApprove","useApprove","handleApprove","console","error","textTransform","pr","UnlockButton","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","Grid","GridItem","Description","ApyCalculatorModal","apy","times","BigNumber","toNumber","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","ml","RainbowLight","keyframes","StyledCardAccent","FCard","props","card","background","Divider","borderColor","ExpandingWrapper","FarmCard","bnbPrice","ethPrice","showExpandableSection","setShowExpandableSection","communityFarms","includes","split","totalValue","lpTotalInQuoteToken","QuoteToken","BNB","CAKE","ETH","Number","undefined","maximumFractionDigits","replace","earnLabel","dual","farmAPY","slice","liquidityUrlPathParts","BASE_ADD_LIQUIDITY_URL","display","CardActionsContainer","FarmTabButtons","stackedOnly","setStackedOnly","useRouteMatch","url","isExact","ToggleWrapper","checked","activeIndex","as","Link","to","Hero","lg","CardImage","img","Farms","path","farmsLP","useFarms","usePriceCakeBusd","usePriceBnbBusd","useWallet","ethPriceUsd","usePriceEthBusd","dispatch","useDispatch","fastRefresh","useRefresh","useEffect","fetchFarmUserDataAsync","activeFarms","filter","inactiveFarms","stackedOnlyFarms","userData","farmsList","farmsToDisplay","cakePriceVsBNB","find","CAKE_POOL_PID","tokenPriceVsQuote","map","tokenAmount","cakeRewardPerBlock","CAKE_PER_BLOCK","poolWeight","cakeRewardPerYear","BLOCKS_PER_YEAR","BUSD","UST","cakeApy","dualApy","rewardPerBlock","plus","Page","exact"],"mappings":"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","file":"static/js/13.47618d5f.chunk.js","sourcesContent":["import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pureswap-libs/uikit'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.textDisabled};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"textDisabled\">{expanded ? 'Hide' : 'Details'}</Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'ETH' : quoteTokenAdresses[chainId]\n  const secondPart = tokenAddresses[chainId]\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { Text, Flex, Link, LinkExternal } from '@pureswap-libs/uikit'\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  removed?: boolean\n  totalValueFormated?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  removed,\n  totalValueFormated,\n  lpLabel,\n  addLiquidityUrl,\n}) => {\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text fontSize=\"14px\" color=\"#366061\">{TranslateString(316, 'Stake')}:</Text>\n        <StyledLinkExternal href={addLiquidityUrl}>{lpLabel}</StyledLinkExternal>\n      </Flex>\n      {!removed && (\n        <Flex justifyContent=\"space-between\">\n          <Text fontSize=\"14px\" color=\"#366061\">{TranslateString(23, 'Total Liquidity')}:</Text>\n          <Text fontSize=\"14px\" color=\"#ACE0CD\">{totalValueFormated}</Text>\n        </Flex>\n      )}\n      <Flex style={{marginTop: '10px'}} justifyContent=\"center\">\n        <Link style={{color: '#366061'}} external href={bscScanAddress} bold={false}>\n          {TranslateString(356, 'View on BscScan')}\n        </Link>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@pureswap-libs/uikit'\nimport { CommunityTag, CoreTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 0.25rem;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  isCommunityFarm,\n  farmImage,\n  tokenSymbol,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.svg`} alt={tokenSymbol} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading color=\"#fff\" style={{ fontWeight: 'normal' }} mb=\"4px\">\n          {lpLabel}\n        </Heading>\n        <Flex justifyContent=\"center\">\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pureswap-libs/uikit'\nimport useI18n from '../../hooks/useI18n'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  // box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\n\nconst StyledErrorMessage = styled(Text)`\n  position: absolute;\n  bottom: -22px;\n  a {\n    display: inline;\n  }\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  addLiquidityUrl,\n  inputTitle,\n}) => {\n  const TranslateString = useI18n()\n  const isBalanceZero = max === '0' || !max\n\n  const displayBalance = isBalanceZero ? '0' : parseFloat(max).toFixed(4)\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\" color=\"#ACE0CD\">{inputTitle}</Text>\n          <Text fontSize=\"14px\" color=\"#ACE0CD\">\n            {TranslateString(1120, 'Balance')}: {displayBalance.toLocaleString()}\n          </Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput onChange={onChange} placeholder=\"0\" value={value} />\n          <Button size=\"sm\" onClick={onSelectMax} mr=\"8px\">\n            {TranslateString(452, 'Max')}\n          </Button>\n          <Text fontSize=\"14px\" color=\"#ACE0CD\">{symbol}</Text>\n        </Flex>\n      </StyledTokenInput>\n      {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"#ACE0CD\">\n          No tokens to stake:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"#ACE0CD\">\n            {TranslateString(999, 'get')} {symbol}\n          </Link>\n        </StyledErrorMessage>\n      )}\n    </div>\n  )\n}\n\nexport default ModalInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal, LinkExternal } from '@pureswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  addLiquidityUrl?: string\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={TranslateString(1068, 'Stake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={TranslateString(1070, 'Stake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} fullWidth>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          fullWidth\n          disabled={pendingTx || fullBalance === '0' || val === '0'}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\n        <span style={{color: '#ACE0CD'}}>{TranslateString(999, 'Get')} {tokenName}</span>\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pureswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={TranslateString(1126, 'Unstake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={TranslateString(588, 'Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} fullWidth>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n          fullWidth\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pureswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  addLiquidityUrl?: string\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  margin-top: 8px;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  addLiquidityUrl,\n}) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button mt=\"8px\" variant=\"secondary\" onClick={onPresentDeposit}>{TranslateString(999, 'Stake LP')}</Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" />\n        </IconButton>\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\n          <AddIcon color=\"primary\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pureswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const rawEarningsBalance = getBalanceNumber(earnings)\n  const displayBalance = rawEarningsBalance.toLocaleString()\n  // console.log(pendingTx, rawEarningsBalance)\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading style={{ fontWeight: 'normal' }} color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>\n        {displayBalance}\n      </Heading>\n      <Button\n        variant=\"secondary\"\n        size=\"sm\"\n        disabled={rawEarningsBalance === 0 || pendingTx}\n        onClick={async () => {\n          setPendingTx(true)\n          await onReward()\n          setPendingTx(false)\n        }}\n      >\n        {TranslateString(562, 'Harvest')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useMemo, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { getContract } from 'utils/erc20'\nimport { getAddress } from 'utils/addressHelpers'\nimport { Button, Flex, Text } from '@pureswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromSymbol, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\nimport { useApprove } from 'hooks/useApprove'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n  addLiquidityUrl?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account, addLiquidityUrl }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses } = useFarmFromSymbol(farm.lpSymbol)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = getAddress(lpAddresses)\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  // console.log(isApproved)\n\n  const lpContract = useMemo(() => {\n    return getContract(ethereum as provider, lpAddress)\n  }, [ethereum, lpAddress])\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={lpName}\n        pid={pid}\n        addLiquidityUrl={addLiquidityUrl}\n      />\n    ) : (\n      <Button variant=\"secondary\" mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(758, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"3px\">\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n          PURE\n        </Text>\n        <Text textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(1072, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(1074, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\n\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\n  // Everything here is worked out relative to a year, with the asset compounding daily\n  const timesCompounded = 365\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const apyAsDecimal = farmApy / 100\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\n  //   Calculate the starting PURE balance with a dollar balance of $1000.\n  const principal = 1000 / cakePrice\n\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting PURE balance (principal)\n  const interestEarned = finalAmount - principal\n  return roundToTwoDp(interestEarned)\n}\n\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage.toFixed(2)\n}\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex } from '@pureswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  addLiquidityUrl?: string\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst Description = styled(Text)`\n  max-width: 320px;\n  margin-bottom: 28px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  lpLabel,\n  cakePrice,\n  apy,\n  addLiquidityUrl,\n}) => {\n  const TranslateString = useI18n()\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\n\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(860, 'Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(858, 'ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(864, 'PURE per $1000')}\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Description fontSize=\"12px\" color=\"textSubtle\">\n        {TranslateString(\n          866,\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n        )}\n      </Description>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={addLiquidityUrl}>\n          <span style={{color: '#366061'}}>{TranslateString(999, 'Get')} {lpLabel}</span>\n        </LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { CalculateIcon, IconButton, useModal } from '@pureswap-libs/uikit'\nimport ApyCalculatorModal from './ApyCalculatorModal'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apy, addLiquidityUrl }) => {\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal lpLabel={lpLabel} cakePrice={cakePrice} apy={apy} addLiquidityUrl={addLiquidityUrl} />,\n  )\n\n  return (\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\n      <CalculateIcon />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@pureswap-libs/uikit'\nimport { communityFarms } from 'config/constants'\nimport { Farm } from 'state/types'\nimport { provider } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { QuoteToken } from 'config/constants/types'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n\t0% {\n\t\tbackground-position: 0% 50%;\n\t}\n\t50% {\n\t\tbackground-position: 100% 50%;\n\t}\n\t100% {\n\t\tbackground-position: 0% 50%;\n\t}\n`\n\nconst StyledCardAccent = styled.div`\n  // background: linear-gradient(\n  //   45deg,\n  //   rgba(255, 0, 0, 1) 0%,\n  //   rgba(255, 154, 0, 1) 10%,\n  //   rgba(208, 222, 33, 1) 20%,\n  //   rgba(79, 220, 74, 1) 30%,\n  //   rgba(63, 218, 216, 1) 40%,\n  //   rgba(47, 201, 226, 1) 50%,\n  //   rgba(28, 127, 238, 1) 60%,\n  //   rgba(95, 21, 242, 1) 70%,\n  //   rgba(186, 12, 248, 1) 80%,\n  //   rgba(251, 7, 217, 1) 90%,\n  //   rgba(255, 0, 0, 1) 100%\n  // );\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 16px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  // background: ${(props) => props.theme.card.background};\n  background: linear-gradient(134deg, #093438 0%, #072c30 100%, #18d6ad 100%);\n  border-radius: 8px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  // background-color: ${({ theme }) => theme.colors.borderColor};\n  // height: 1px;\n  margin: 10px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  bnbPrice?: BigNumber\n  ethPrice?: BigNumber\n  ethereum?: provider\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethPrice, ethereum, account }) => {\n  const TranslateString = useI18n()\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  const farmImage = farm.lpSymbol.split(' ')[0] // .toLocaleLowerCase()\n\n  const totalValue: BigNumber = useMemo(() => {\n    if (!farm.lpTotalInQuoteToken) {\n      return null\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n      // console.log(farm.lpTotalInQuoteToken)\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n      return cakePrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.ETH) {\n      return ethPrice.times(farm.lpTotalInQuoteToken)\n    }\n    return farm.lpTotalInQuoteToken\n  }, [bnbPrice, cakePrice, ethPrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\n  const totalValueFormated = totalValue\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const earnLabel = farm.dual ? farm.dual.earnLabel : 'PURE'\n  const farmAPY = farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString('en-US').slice(0, -1)\n\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses } = farm\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  return (\n    <FCard>\n      {farm.tokenSymbol === 'CAKE' && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        isCommunityFarm={isCommunityFarm}\n        farmImage={farmImage}\n        tokenSymbol={farm.tokenSymbol}\n      />\n      {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text color=\"textSubtle\">{TranslateString(736, 'APR')}:</Text>\n          <Text color=\"textDisabled\" style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apy ? (\n              <>\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apy={farm.apy} />\n                {farmAPY}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"space-between\">\n        <Text color=\"textSubtle\">{TranslateString(318, 'Earn')}:</Text>\n        <Text color=\"textDisabled\">{earnLabel}</Text>\n      </Flex>\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} addLiquidityUrl={addLiquidityUrl} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          bscScanAddress={`https://bscscan.com/address/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`}\n          totalValueFormated={totalValueFormated}\n          lpLabel={lpLabel}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, Text, Toggle } from '@pureswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst FarmTabButtons = ({ stackedOnly, setStackedOnly }) => {\n  const { url, isExact } = useRouteMatch()\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <ToggleWrapper>\n        <Toggle checked={stackedOnly} onChange={() => setStackedOnly(!stackedOnly)} />\n        <Text color=\"input\"> {TranslateString(1116, 'Staked only')}</Text>\n      </ToggleWrapper>\n      <ButtonMenu activeIndex={isExact ? 0 : 1} size=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {TranslateString(698, 'Active')}\n        </ButtonMenuItem>\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\n          {TranslateString(700, 'Inactive')}\n        </ButtonMenuItem>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  // justify-content: center;\n  align-items: center;\n  margin-bottom: 32px;\n  position: relative;\n  z-index: 999;\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-right: 32px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n","import React, { useEffect, useCallback, useState } from 'react'\nimport styled from 'styled-components'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Image, Heading, Text } from '@pureswap-libs/uikit'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd, usePriceEthBusd } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport Divider from './components/Divider'\n\nconst Hero = styled.div`\n  align-items: left;\n  background-image: url('/images/home_header_bg.png')\n  // background-image: url('/images/pan-bg-mobile.svg');\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  padding: 24px 0 0 0;\n  // margin-bottom: 32px;\n  // padding-top: 116px;\n  // text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    // background-image: url('/images/pan-bg2.svg'), url('/images/pan-bg.svg');\n    // background-position: left center, right center;\n    // height: 165px;\n    // padding-top: 0;\n  }\n`\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n  position: absolute;\n  right: 0;\n`\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const ethPriceUsd = usePriceEthBusd()\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stackedOnly, setStackedOnly] = useState(false)\n\n  // console.log(cakePrice.toNumber())\n  // const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X')\n  // const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X')\n\n  const activeFarms = farmsLP.filter((farm) => farm.multiplier !== '0X')\n  const inactiveFarms = farmsLP.filter((farm) => farm.multiplier === '0X')\n\n  const stackedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      // console.log(cakePriceVsBNB.toNumber())\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n          return farm\n        }\n        const cakeRewardPerBlock = CAKE_PER_BLOCK.times(farm.poolWeight)\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n        // cakePriceInQuote * cakeRewardPerYear / lpTotalInQuoteToken\n        let apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken)\n\n        if (farm.quoteTokenSymbol === QuoteToken.BUSD || farm.quoteTokenSymbol === QuoteToken.UST) {\n          apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken).times(bnbPrice)\n        } else if (farm.quoteTokenSymbol === QuoteToken.ETH) {\n          apy = cakePrice.div(ethPriceUsd).times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken)\n        } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n          apy = cakeRewardPerYear.div(farm.lpTotalInQuoteToken)\n        } else if (farm.dual) {\n          const cakeApy =\n            farm && cakePriceVsBNB.times(cakeRewardPerBlock).times(BLOCKS_PER_YEAR).div(farm.lpTotalInQuoteToken)\n          const dualApy =\n            farm.tokenPriceVsQuote &&\n            new BigNumber(farm.tokenPriceVsQuote)\n              .times(farm.dual.rewardPerBlock)\n              .times(BLOCKS_PER_YEAR)\n              .div(farm.lpTotalInQuoteToken)\n\n          apy = cakeApy && dualApy && cakeApy.plus(dualApy)\n        }\n\n        return { ...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          ethPrice={ethPriceUsd}\n          ethereum={ethereum}\n          account={account}\n        />\n      ))\n    },\n    [farmsLP, bnbPrice, ethPriceUsd, cakePrice, ethereum, account],\n  )\n\n  return (\n    <Page>\n      <CardImage src=\"/images/babg/farm_banner.png\" width={200} />\n      <Hero>\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\n          {TranslateString(696, 'Stake LP tokens to earn PURE')}\n        </Heading>\n        {/* <CardImage src=\"/images//home_header_bg.png\" alt=\"cake logo\" width={800} /> */}\n        {/* <Text style={{ color: '#FFFFFF' }}>{TranslateString(578, 'The #1 AMM and yield farm on Binance Smart Chain.')}</Text> */}\n        <FarmTabButtons stackedOnly={stackedOnly} setStackedOnly={setStackedOnly} />\n      </Hero>\n\n      {/* <Heading as=\"h1\" size=\"lg\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        {TranslateString(696, 'Stake LP tokens to earn CAKE')}\n      </Heading> */}\n\n      <div>\n        {/* <Divider /> */}\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {stackedOnly ? farmsList(stackedOnlyFarms, false) : farmsList(activeFarms, false)}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsList(inactiveFarms, true)}\n          </Route>\n        </FlexLayout>\n      </div>\n      {/* <Image src=\"/images/cakecat.png\" alt=\"Pancake illustration\" width={949} height={384} responsive /> */}\n    </Page>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}