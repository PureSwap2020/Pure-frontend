{"version":3,"sources":["utils/erc20.ts","hooks/useTokenBalance.ts","hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/CardValue.tsx","views/Home/components/CardBusdValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","hooks/api.ts","views/Home/components/EarnAPYCard.tsx","views/Home/components/EarnAssetCard.tsx","views/Home/Home.tsx"],"names":["getContract","provider","address","Web3","eth","Contract","erc20","getAllowance","lpContract","masterChefContract","account","a","methods","allowance","options","call","getTokenBalance","tokenAddress","userAddress","contract","balanceOf","balance","useTotalSupply","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","useEffect","cakeContract","cakeABI","getCakeAddress","supply","BigNumber","fetchTotalSupply","useBurnedBalance","setBalance","useWallet","ethereum","res","fetchBalance","useTokenBalance","fastRefresh","useFarmsWithBalance","farmsWithBalances","setFarmsWithBalances","calls","farmsConfig","map","farm","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","fetchBalances","useAllEarnings","balances","fetchAllBalances","CardValue","value","decimals","fontSize","lineHeight","prefix","bold","color","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","style","CardBusdValue","props","Block","styled","div","CakeHarvestBalance","TranslateString","useI18n","earningsSum","reduce","accum","earning","pow","toNumber","earningsBusd","multipliedBy","usePriceCakeBusd","CakeWalletBalance","cakeBalance","busdBalance","getBalanceNumber","StyledFarmStakingCard","Card","theme","mediaQueries","xs","sm","lg","Label","img","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","size","mb","fontWeight","id","disabled","length","onClick","variant","UnlockButton","StyledCakeStats","Row","CakeStats","burnedBalance","cakeSupply","StyledTotalValueLockedCard","TotalValueLockedCard","data","setData","setTimeout","useGetStats","lpTvl","useTvl","pools","usePools","priceBnbBusd","usePriceBnbBusd","priceCakeBusd","forEach","item","pool","fetchPoolApy","then","window","localStorage","setItem","sousId","tvlPrice","toString","poolSum","i","poolApy","getItem","Number","lpTvlSum","tokenName","number","_hex","times","tokenPrice","tvl","toFixed","marginTop","marginBottom","height","CardMidContent","Heading","attrs","EarnAPYCard","farmsLP","useFarms","bnbPrice","maxAPY","MIN_VALUE","getHighestAPY","activeFarms","multiplier","calculateAPY","toLocaleString","slice","farmsToDisplay","cakePriceVsBNB","find","CAKE_POOL_PID","tokenPriceVsQuote","tokenAmount","lpTotalInQuoteToken","cakeRewardPerBlock","CAKE_PER_BLOCK","poolWeight","cakeRewardPerYear","BLOCKS_PER_YEAR","apy","quoteTokenSymbol","QuoteToken","BUSD","CAKE","dual","cakeApy","dualApy","rewardPerBlock","plus","animation","justifyContent","exact","activeClassName","to","mt","StyledHeadingSpan","span","secondary","StyledHeadingSmallSpan","EarnAssetCard","activeNonCakePools","isFinished","includes","latestPools","orderBy","join","position","top","left","Hero","Cards","BaseLayout","CardsB","CardImage","Home","Page","src","width","as","FarmStakingCard"],"mappings":"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","file":"static/js/13.444a60ff.chunk.js","sourcesContent":["import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, '0x000000000000000000000000000000000000dEaD')\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingPureToken',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account }: { account: string } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingPureToken',\n        params: [farm.pid, account],\n      }))\n      // console.log(masterChefABI)\n      // console.log(calls)\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pureswap-libs/uikit'\n\nexport interface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  lineHeight?: string\n  prefix?: string\n  bold?: boolean\n  color?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({\n  value,\n  decimals,\n  fontSize = '40px',\n  lineHeight = '1',\n  prefix = '',\n  bold = true,\n  color = 'text',\n}) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport CardValue, { CardValueProps } from './CardValue'\n\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\n  return (\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\n  )\n}\n\nexport default CardBusdValue\n","import React from 'react'\nimport { Text } from '@pureswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport styled from 'styled-components'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst Block = styled.div`\n  margin-bottom: 24px;\n}\n`\n\nconst CakeHarvestBalance = () => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const earningsBusd = new BigNumber(earningsSum).multipliedBy(usePriceCakeBusd()).toNumber()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '42px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <Block>\n      <CardValue value={earningsSum} lineHeight=\"1.5\" />\n      <CardBusdValue value={earningsBusd} />\n    </Block>\n  )\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pureswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { BigNumber } from 'bignumber.js'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst CakeWalletBalance = () => {\n  const TranslateString = useI18n()\n  const cakeBalance = useTokenBalance(getCakeAddress())\n  const busdBalance = new BigNumber(getBalanceNumber(cakeBalance)).multipliedBy(usePriceCakeBusd()).toNumber()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '54px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <>\n      <CardValue value={getBalanceNumber(cakeBalance)} decimals={4} fontSize=\"24px\" lineHeight=\"36px\" />\n      <CardBusdValue value={busdBalance} />\n    </>\n  )\n}\n\nexport default CakeWalletBalance\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@pureswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background: linear-gradient(134deg, #093438 0%, #072c30 100%, #18d6ad 100%);\n  height: 355px;\n  width: 40% !important;\n  text-align: center;\n  position: relative;\n  z-index: 99;\n  margin-top: -50px;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 100% !important;\n    margin-top: 30px;\n    margin-bottom: 30px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 100% !important;\n    margin-top: 30px;\n    margin-bottom: 30px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    width: 40% !important;\n    margin-top: -50px;\n    margin-bottom: 0;\n  }\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\" style={{ fontWeight: 400 }}>\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n        {/* <CardImage src=\"/images/cake.svg\" alt=\"cake logo\" width={64} height={64} /> */}\n        <Block>\n          <Label>{TranslateString(544, 'PURE to Harvest')}:</Label>\n          <CakeHarvestBalance />\n        </Block>\n        <Block>\n          <Label>{TranslateString(546, 'PURE in Wallet')}:</Label>\n          <CakeWalletBalance />\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              variant=\"secondary\"\n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting PURE')\n                : TranslateString(532, `Harvest all (${balancesWithValue.length})`)}\n            </Button>\n          ) : (\n            <UnlockButton variant=\"secondary\" />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pureswap-libs/uikit'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\n\nconst StyledCakeStats = styled(Card)`\n  height: 355px;\n  // width: 414px !important;\n  margin-top: 30px;\n  background: linear-gradient(134deg, #093438 0%, #072c30 100%, #18d6ad 100%);\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const cakeSupply = totalSupply ? getBalanceNumber(totalSupply) - getBalanceNumber(burnedBalance) : 0\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\" style={{ fontWeight: 'normal' }}>\n          {TranslateString(534, 'Pure Stats')}\n        </Heading>\n        <Row>\n          <Text color=\"textSubtle\" fontSize=\"14px\">\n            {TranslateString(536, 'Total Pure Supply')}\n          </Text>\n          {cakeSupply && <CardValue bold={false} fontSize=\"14px\" value={cakeSupply} />}\n        </Row>\n        <Row>\n          <Text color=\"textSubtle\" fontSize=\"14px\">\n            {TranslateString(538, 'Total Pure Burned')}\n          </Text>\n          <CardValue fontSize=\"14px\" bold={false} value={getBalanceNumber(burnedBalance)} />\n        </Row>\n        <Row>\n          <Text color=\"textSubtle\" fontSize=\"14px\">\n            {TranslateString(540, 'New Pure/block')}\n          </Text>\n          <p>3.25</p>\n          {/* <CardValue fontSize=\"14px\" bold={false} decimals={0} value={6.5} /> */}\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","// @ts-nocheck\nimport React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pureswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useGetStats } from 'hooks/api'\nimport { useTvl, usePools, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { fetchPoolApy } from 'state/pools/fetchPools';\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  background: linear-gradient(134deg, #052528 0%, #093337 100%, #18d6ad 100%);\n  // display: flex;\n  // flex: 1;\n  // position: absolute;\n  // right: 0;\n  height: 265px;\n  position: relative;\n  right: 38px;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    right: 0;\n  }\n  ${({ theme }) => theme.mediaQueries.sm} {\n    right: 0;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    right: 38px;\n  }\n`\n\n\n\nconst TotalValueLockedCard = () => {\n  const TranslateString = useI18n()\n  const data = useGetStats()\n  const { account } = useWallet()\n  const lpTvl = useTvl()\n  const pools = usePools(account)\n  const priceBnbBusd = usePriceBnbBusd()\n  const priceCakeBusd = usePriceCakeBusd()\n\n  const getApy = (pool) => {\n    fetchPoolApy(pool, priceCakeBusd, priceBnbBusd).then(res => {\n      window.localStorage.setItem(`poolApy${pool.sousId}Price`, res.tvlPrice.toString())\n    })\n  }\n  pools.forEach(item => {\n    getApy(item)\n  })\n  \n\n  let poolSum = 0 // pools total price for usd\n  for (let i = 0; i < pools.length; i ++) {\n    const poolApy = window.localStorage.getItem(`poolApy${pools[i].sousId}Price`) ? window.localStorage.getItem(`poolApy${pools[i].sousId}Price`) : 0\n    poolSum += Number(poolApy)\n  }\n  let lpTvlSum = 0 // lp total price for usd\n  if (lpTvl.length > 0) {\n    for (let i = 0; i < lpTvl.length; i ++) {\n      if (lpTvl[i].tokenName === 'PURE') {\n        const priceTvl = new BigNumber(lpTvl[i].number._hex)\n          .times(priceCakeBusd)\n          .times(new BigNumber(2))\n          .div(new BigNumber(10).pow(18))\n        // console.log(priceTvl.toNumber())\n        lpTvlSum += priceTvl.toNumber()\n      } else if (lpTvl[i].tokenName !== undefined) {\n        const tokenPrice = localStorage.getItem(lpTvl[i].tokenName) || 0\n        const priceTvl = new BigNumber(lpTvl[i].number._hex)\n              .times(tokenPrice)\n              .times(new BigNumber(2))\n              .div(new BigNumber(10).pow(18))\n        lpTvlSum += priceTvl.toNumber()\n      }\n    }\n  }\n\n  const tvl = (lpTvlSum + poolSum).toFixed(2)\n  // const tvl = data ? data.total_value_locked_all.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading size=\"lg\" mb=\"24px\" style={{ marginTop: '28px', fontWeight: 'normal' }}>\n          {TranslateString(762, 'Total Value Locked (TVL)')}\n        </Heading>\n        {data ? (\n          <>\n            <Heading\n              size=\"xl\"\n              style={{ marginTop: '36px', marginBottom: '10px', fontWeight: 'normal' }}\n            >{`$${tvl}`}</Heading>\n            <Text color=\"textSubtle\">{TranslateString(764, 'Across all LPs and Pools')}</Text>\n          </>\n        ) : (\n          <>\n            <Skeleton height={66} />\n          </>\n        )}\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import { useEffect, useState } from 'react'\n\n/*\n * Due to Cors the api was forked and a proxy was created\n * @see https://github.com/pancakeswap/gatsby-pancake-api/commit/e811b67a43ccc41edd4a0fa1ee704b2f510aa0ba\n */\nexport const baseUrl = 'https://api.pancakeswap.com/api/v1'\n\n/* eslint-disable camelcase */\n\nexport interface TradePair {\n  swap_pair_contract: string\n  base_symbol: string\n  quote_symbol: string\n  last_price: number\n  base_volume_24_h: number\n  quote_volume_24_h: number\n}\n\nexport interface ApiStatResponse {\n  update_at: string\n  '24h_total_volume': number\n  total_value_locked: number\n  total_value_locked_all: number\n  trade_pairs: {\n    [key: string]: TradePair\n  }\n}\n\nexport const useGetStats = () => {\n  const [data, setData] = useState(null)\n\n  // useEffect(() => {\n  //   const fetchData = async () => {\n  //     try {\n  //       const response = await fetch(`${baseUrl}/stat`)\n  //       const responsedata: ApiStatResponse = await response.json()\n  //       // console.log(responsedata)\n  //       setData(responsedata)\n  //     } catch (error) {\n  //       console.error('Unable to fetch data:', error)\n  //     }\n  //   }\n\n  //   fetchData()\n  // }, [setData])\n  setTimeout(() => {\n    setData(true)\n  }, 3000)\n  return data\n}\n// export const useSingleTokenPrice = (tokenName) => {\n//   const [price, setPrice] = useState(null)\n//   useEffect(() => {\n//     const fetchPrice = async () => {\n//       const res = await fetch(`https://api.coingecko.com/api/v3/simple/price?ids=${tokenName}&vs_currencies=usd`)\n//       const _priceData = await res.json()\n//       const _price = _priceData[tokenName].usd\n//       setPrice(_price)\n//     }\n//     fetchPrice()\n//   })\n//   // console.log(price)\n//   return price\n// }","import React, { useCallback, useRef } from 'react'\nimport styled, { ThemeConsumer } from 'styled-components'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pureswap-libs/uikit'\nimport { NavLink } from 'react-router-dom'\nimport useI18n from 'hooks/useI18n'\nimport BigNumber from 'bignumber.js'\nimport { QuoteToken } from 'config/constants/types'\nimport { useFarms, usePriceBnbBusd } from 'state/hooks'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background: linear-gradient(134deg, #093337 0%, #052528 100%, #18d6ad 100%);\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  height: 265px;\n  position: relative;\n  left: 38px;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    left: 0;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    left: 0;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    left: 38px;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\n  line-height: 44px;\n  font-weight: 500;\n`\nconst EarnAPYCard = () => {\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const bnbPrice = usePriceBnbBusd()\n\n  const maxAPY = useRef(Number.MIN_VALUE)\n\n  const getHighestAPY = () => {\n    const activeFarms = farmsLP.filter((farm) => farm.multiplier !== '0X')\n    calculateAPY(activeFarms)\n    return (maxAPY.current * 100).toLocaleString('en-US').slice(0, -1)\n  }\n\n  const calculateAPY = useCallback(\n    (farmsToDisplay) => {\n      const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n\n      farmsToDisplay.map((farm) => {\n        if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n          return farm\n        }\n        const cakeRewardPerBlock = CAKE_PER_BLOCK.times(farm.poolWeight)\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n        let apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken)\n        \n        if (farm.quoteTokenSymbol === QuoteToken.BUSD) {\n          apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken).times(bnbPrice)\n        } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n          apy = cakeRewardPerYear.div(farm.lpTotalInQuoteToken)\n        } else if (farm.dual) {\n          const cakeApy =\n            farm && cakePriceVsBNB.times(cakeRewardPerBlock).times(BLOCKS_PER_YEAR).div(farm.lpTotalInQuoteToken)\n          const dualApy =\n            farm.tokenPriceVsQuote &&\n            new BigNumber(farm.tokenPriceVsQuote)\n              .times(farm.dual.rewardPerBlock)\n              .times(BLOCKS_PER_YEAR)\n              .div(farm.lpTotalInQuoteToken)\n\n          apy = cakeApy && dualApy && cakeApy.plus(dualApy)\n        }\n        if (maxAPY.current <= apy.toNumber()) maxAPY.current = apy.toNumber()\n\n        return apy\n      })\n    },\n    [bnbPrice, farmsLP],\n  )\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"lg\" style={{ marginTop: '28px', fontWeight: 'normal' }}>\n          Earn up to\n        </Heading>\n        <CardMidContent color=\"#ACE0CD\" style={{ marginTop: '36px', marginBottom: '10px' }}>\n          {getHighestAPY() ? (\n            `${getHighestAPY()}% ${TranslateString(736, 'APR')}`\n          ) : (\n            <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\n          )}\n        </CardMidContent>\n        <Flex justifyContent=\"space-between\">\n          <Heading style={{ fontSize: '14px', fontWeight: 'normal', color: '#366061' }} size=\"lg\">\n            in Farms\n          </Heading>\n          <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apy-cta\">\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </NavLink>\n        </Flex>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAPYCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport orderBy from 'lodash/orderBy'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from '@pureswap-libs/uikit'\nimport { NavLink } from 'react-router-dom'\nimport pools from 'config/constants/pools'\nimport { Pool } from 'state/types'\n\nconst StyledFarmStakingCard = styled(Card)`\n  height: 355px;\n  width: 414px !important;\n  background: #00182100 !important;\n  width: 100%;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n`\nconst StyledHeadingSpan = styled.span`\n  font-size: 80px;\n  color: ${({ theme }) => theme.colors.secondary};\n  font-weight: 500;\n`\nconst StyledHeadingSmallSpan = styled.span`\n  font-weight: normal;\n`\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\n  line-height: 44px;\n`\nconst EarnAssetCard = () => {\n  const activeNonCakePools = pools.filter((pool) => !pool.isFinished && !pool.tokenName.includes('CAKE'))\n  const latestPools: Pool[] = orderBy(activeNonCakePools, ['sortOrder', 'pid'], ['desc', 'desc']).slice(0, 3)\n  // Always include CAKE\n  const assets = ['CAKE', ...latestPools.map((pool) => pool.tokenName)].join(', ')\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"lg\">\n          <StyledHeadingSpan>Earn Pure</StyledHeadingSpan>\n        </Heading>\n        {/* <CardMidContent color=\"invertedContrast\">{assets}</CardMidContent> */}\n        <Flex justifyContent=\"space-between\">\n          <Heading size=\"lg\">\n            <StyledHeadingSmallSpan>in Pools</StyledHeadingSmallSpan>\n            <NavLink exact activeClassName=\"active\" to=\"/syrup\" id=\"pool-cta\">\n              <ArrowForwardIcon\n                style={{ marginTop: '10px', position: 'relative', top: '4px', left: '10px' }}\n                mt={30}\n                color=\"primary\"\n              />\n            </NavLink>\n          </Heading>\n        </Flex>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAssetCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@pureswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\n// import LotteryCard from 'views/Home/components/LotteryCard'\nimport CakeStats from 'views/Home/components/CakeStats'\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\nimport EarnAPYCard from 'views/Home/components/EarnAPYCard'\nimport EarnAssetCard from 'views/Home/components/EarnAssetCard'\n// import WinCard from 'views/Home/components/WinCard'\n\nconst Hero = styled.div`\n  align-items: left;\n  background-image: url('/images/home_header_bg.png')\n  // background-image: url('/images/pan-bg-mobile.svg');\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  padding: 24px 0 134px 0;\n  // margin-bottom: 32px;\n  // padding-top: 116px;\n  // text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    // background-image: url('/images/pan-bg2.svg'), url('/images/pan-bg.svg');\n    // background-position: left center, right center;\n    // height: 165px;\n    // padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  display: flex;\n  margin-bottom: 32px;\n  & > div {\n    width: 30%;\n  }\n  ${({ theme }) => theme.mediaQueries.xs} {\n    display: block;\n    & > div {\n      width: 100%;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    display: block;\n    & > div {\n      width: 100%;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: flex;\n    & > div {\n      width: 30%;\n    }\n  }\n`\nconst CardsB = styled(BaseLayout)`\n  display: flex;\n  margin-bottom: 32px;\n  margin-left: 38px;\n  & > div {\n    width: 50%;\n  }\n  ${({ theme }) => theme.mediaQueries.xs} {\n    display: block;\n    margin-left: 0;\n    & > div {\n      width: 100%;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    display: block;\n    margin-left: 0;\n    & > div {\n      width: 100%;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: flex;\n    margin-left: 38px;\n    & > div {\n      width: 50%;\n    }\n  }\n`\n\nconst CTACards = styled(BaseLayout)`\n  align-items: start;\n  margin-bottom: 32px;\n\n  & > div {\n    grid-column: span 6;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 4;\n    }\n  }\n`\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n  position: absolute;\n  right: 0;\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <CardImage src=\"/images/babg/home_header_bg.png\" width={800} />\n      <Hero>\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\n          {TranslateString(576, 'PureSwap')}\n        </Heading>\n        <Text style={{ color: '#85898c' }}>\n          {TranslateString(578, 'The DEX with best liquidity and asset on BSC')}\n        </Text>\n      </Hero>\n      <div>\n        <Cards>\n          <EarnAPYCard />\n          <FarmStakingCard />\n          <TotalValueLockedCard />\n          {/* <LotteryCard /> */}\n        </Cards>\n        <CardsB>\n          <CakeStats />\n          <EarnAssetCard />\n        </CardsB>\n        {/* <CTACards><WinCard /></CTACards> */}\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}